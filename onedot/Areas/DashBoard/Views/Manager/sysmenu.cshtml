
@{
    ViewBag.Title = "sysmenu";
    Layout = "~/Areas/DashBoard/Views/Shared/_LayoutDash.cshtml";




}






    @(Html.Kendo().Grid<one.Service.MenuTree>()
            .Name("GridMenuTree")
            .HtmlAttributes(new { @class = "one-grid-resize" })
            .Columns(columns =>
            {
                columns.Bound(c => c.Id).Title("Id").Width(80);


                columns.Bound(c => c.ParentId).Title("ParentId").Width(80);

                columns.Bound(c => c.FuncCaption).Title(Lang.FuncCaption).Width(180);
                columns.Bound(c => c.FuncDescribe).Title(Lang.FuncDescribe).Width(180);
                columns.Bound(c => c.FuncTitle).Title(Lang.FuncTitle).Width(180);

                columns.Bound(c => c.Area).Title(Lang.RouteArea).Width(120);
                columns.Bound(c => c.Controller).Title(Lang.RouteController).Width(120);
                columns.Bound(c => c.Action).Title(Lang.RouteAction).Width(120);
                columns.Bound(c => c.DefaultParam).Title(Lang.RouteDefaultParam).Width(180);


                columns.ForeignKey(c => c.ModuleId, (System.Collections.IEnumerable)one.Service.CommonData.ApplicationModule,  "Id","Text").Title("所属模块");

                columns.ForeignKey(c => c.RequestType, (System.Collections.IEnumerable)one.Service.CommonData.NetRequestType, "Id","Text").Title("请求类型");

                columns.ForeignKey(c => c.FuncTypeId, (System.Collections.IEnumerable)one.Service.CommonData.PowerFunctionLevel, "Id", "Text").Title("功能等级");


                columns.Bound(c => c.SortNo).Title(Lang.SortNo).Width(60);

                columns.Bound(c => c.State).Title(Lang.State).Width(60);

                columns.Bound(c => c.ImgSrc).Title(Lang.ImgScr);



            })
               .ToolBar(toolbar =>
               {
               toolbar.Template(
                @<text>
                    <div class="one-toolbar">

                        <button type="button" class="k-button one-grid-add">
                            <i class="icon-magic"></i>@(one.Res.Lang.Btn_Add)
                        </button>

                        <button type="button" class="k-button one-grid-edit">
                            <i class="icon-edit"></i>@(one.Res.Lang.Btn_Edit)
                        </button>

                        <button type="button" class="k-button one-grid-del">
                            <i class="icon-print"></i>@(one.Res.Lang.Btn_Del)
                        </button>

                    </div>


                </text>
                );
               })


                                .Editable(editable => editable
                                    .Mode(GridEditMode.PopUp)
                                    .TemplateName("_EditSysMenu")
                                    .Window(a => a.Title(Lang.ModifyUserProfile)
                                     .Animation(animation =>
                                     {
                                         animation.Open(open =>
                                         {
                                             if (ViewBag.animation == "expand")
                                             {
                                                 open.Expand(ExpandDirection.Vertical);
                                                 open.Duration(1);
                                             }

                                             if (ViewBag.animation == "zoom")
                                             {
                                                 open.Zoom(ZoomDirection.In);
                                             }

                                             //if (ViewBag.opacity)
                                             //{
                                             //    open.Fade(FadeDirection.In);
                                             //}
                                         });

                                         animation.Close(close =>
                                         {
                                             close.Reverse(true);
                                             if (ViewBag.animation == "expand")
                                             {
                                                 close.Expand(ExpandDirection.Vertical);
                                                 close.Duration(1);
                                             }

                                             if (ViewBag.animation == "zoom")
                                             {
                                                 close.Zoom(ZoomDirection.Out);
                                                 close.Reverse(false);
                                             }

                                             //if (ViewBag.opacity)
                                             //{
                                             //    close.Fade(FadeDirection.In);
                                             //}

                                         });
                                     })
                                        //.Animation(animation =>
                                        //{

                                        //    animation.Open(open =>
                                        //    {
                                        //        open.SlideIn(SlideDirection.Left);

                                        //    });

                                        //    animation.Close(close =>
                                        //    {
                                        //        close.SlideIn(SlideDirection.Right);
                                        //    });

                                        //})
                                        ))

                    .Pageable(p => p.Input(true)
                        .Numeric(true)
                        .PageSizes(new[] { 30, 50, 120 })
                        .Refresh(true).Info(true).
                        Messages(a =>
                        {
                            a.ItemsPerPage(one.Res.Lang.Page_ItemsPerPage);
                            a.Page(one.Res.Lang.Page_Page);
                            a.Of(one.Res.Lang.Page_of);
                            a.Display(one.Res.Lang.Page_Display);
                        }))
                        .Navigatable()
                        .Sortable()
                        .Selectable()
                        .Scrollable(scr => scr.Height(580))
                        .Filterable(a => a.Extra(false)
                            .Operators(operators => operators
                                .ForString(str =>
                                    str.Clear()
                                    .Contains(one.Res.Lang.Flt_Contains)
                                    .DoesNotContain(one.Res.Lang.Flt_NotContain)
                                    .IsEqualTo(one.Res.Lang.Flt_IsSqualTo)
                                    .IsNotEqualTo(one.Res.Lang.Flt_IsNotSqualTo)
                                    .EndsWith(one.Res.Lang.Flt_EndsWith)
                                    .StartsWith(one.Res.Lang.Flt_StartsWith)
                                    )
                                .ForDate(date => date.Clear()
                                    .IsGreaterThan(one.Res.Lang.Flt_Date_gt)
                                    .IsEqualTo(one.Res.Lang.Flt_IsSqualTo)
                                    .IsLessThan(one.Res.Lang.Flt_Date_lt)
                                    )
                                .ForNumber(num => num.Clear()
                                    .IsEqualTo(one.Res.Lang.Flt_IsSqualTo)
                                    .IsGreaterThan(one.Res.Lang.Flt_gt)
                                    .IsGreaterThanOrEqualTo(one.Res.Lang.Flt_gte)
                                    .IsLessThan(one.Res.Lang.Flt_lt)
                                    .IsLessThanOrEqualTo(one.Res.Lang.Flt_lte)
                                    .IsNotEqualTo(one.Res.Lang.Flt_IsNotSqualTo)
                                    )
                                .ForEnums(enu => enu.IsEqualTo(one.Res.Lang.Flt_IsSqualTo)
                                    .IsNotEqualTo(one.Res.Lang.Flt_IsNotSqualTo))
                                    )
                                .Messages(m => m
                                    .Filter(one.Res.Lang.Flt_msg_fliter)
                                    .Clear(one.Res.Lang.Flt_msg_clear)
                                    .SelectValue(one.Res.Lang.Flt_msg_selectValue)
                                    .Info(one.Res.Lang.Flt_msg_info)
                                    .And(one.Res.Lang.Flt_msg_and)
                                    .Or(one.Res.Lang.Flt_msg_or)
                                    .IsFalse(one.Res.Lang.Flt_msg_false)
                                    .IsTrue(one.Res.Lang.Flt_msg_true)
                                    ))
                         // .Events(evt => evt.Edit("gridEdit"))
                         //.Events(e => e.Change("onChangeForReselect"))
                         .DataSource(dataSource => dataSource
                             .Ajax()
                             .PageSize(30)
                             //.AutoSync(true)
                             .Sort(sort => {
                                 sort.Add("ParentId");
                                 sort.Add("Id");
                             })
                        //.Filter(filter => filter.Add(a => a.State).IsEqualTo(4))
                        //.ServerOperation(false)
                        .Events(events => events
                            .RequestEnd("kendoRequestBack")
                            )
                         .Model(model =>
                         {
                             model.Id(p => p.Id);
                             model.Field(p => p.Id).Editable(false);
                         })
                     //.Group(g => g.Add(ad => ad.CategoryId))
                     .Read(read => read.Action("read_menu", "manager", new { area = "dashboard" }))
                     .Create(create => create.Action("update_menu", "manager", new { area = "dashboard" }))
                     .Update(update => update.Action("update_menu", "manager", new { area = "dashboard" }))
                     .Destroy(destroy => destroy.Action("destroy_menu", "manager", new { area = "dashboard" }))
                     )
    // .ClientDetailTemplateId("template")
    // .Events(e => e.DetailExpand("detailExpand"))

    //.Events(e => e.DataBound("function(){  resizeGrid('GridHotelQuotationDescribe',50);}"))
    //  .Events(e => e.Change("onGridRowChange"))
    )
